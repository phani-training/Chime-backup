# This is the CMakeCache file.
# For build in directory: c:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build
# It was generated by CMake: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe
# You can edit this file to change values found and used by cmake.
# If you do not want to change any of the values, simply exit the editor.
# If you do want to change a value, simply edit, save, and exit the editor.
# The syntax for the file is as follows:
# KEY:TYPE=VALUE
# KEY is the name of a variable in the cache.
# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT TYPE!.
# VALUE is the current value for the KEY.

########################
# EXTERNAL cache entries
########################

//Value Computed by CMake
AmazonChimeSdkCppUnitTest_BINARY_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/test

//Value Computed by CMake
AmazonChimeSdkCppUnitTest_SOURCE_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/test

//Value Computed by CMake
AmazonChimeSignalingSdkCpp_BINARY_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build

//Value Computed by CMake
AmazonChimeSignalingSdkCpp_SOURCE_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp

//Builds the googlemock subproject
BUILD_GMOCK:BOOL=ON

//Build tests
BUILD_TEST:BOOL=ON

//Build the testing tree.
BUILD_TESTING:BOOL=ON

//Path to a program.
CMAKE_AR:FILEPATH=C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/lib.exe

//Semicolon separated list of supported configuration types, only
// supports Debug, Release, MinSizeRel, and RelWithDebInfo, anything
// else will be ignored.
CMAKE_CONFIGURATION_TYPES:STRING=Debug;Release;MinSizeRel;RelWithDebInfo

//Flags used by the CXX compiler during all build types.
CMAKE_CXX_FLAGS:STRING=/DWIN32 /D_WINDOWS /EHsc

//Flags used by the CXX compiler during DEBUG builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=/Zi /Ob0 /Od /RTC1

//Flags used by the CXX compiler during MINSIZEREL builds.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=/O1 /Ob1 /DNDEBUG

//Flags used by the CXX compiler during RELEASE builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=/O2 /Ob2 /DNDEBUG

//Flags used by the CXX compiler during RELWITHDEBINFO builds.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=/Zi /O2 /Ob1 /DNDEBUG

//Libraries linked by default with all C++ applications.
CMAKE_CXX_STANDARD_LIBRARIES:STRING=kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib

//Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=/DWIN32 /D_WINDOWS

//Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=/Zi /Ob0 /Od /RTC1

//Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=/O1 /Ob1 /DNDEBUG

//Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=/O2 /Ob2 /DNDEBUG

//Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=/Zi /O2 /Ob1 /DNDEBUG

//Libraries linked by default with all C applications.
CMAKE_C_STANDARD_LIBRARIES:STRING=kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib

//Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

//Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

//Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

//Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

//User executables (bin)
CMAKE_INSTALL_BINDIR:PATH=bin

//Directory relative to CMAKE_INSTALL to install the cmake configuration
// files
CMAKE_INSTALL_CMAKEDIR:STRING=cmake

//Read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_DATADIR:PATH=

//Read-only architecture-independent data root (share)
CMAKE_INSTALL_DATAROOTDIR:PATH=share

//Documentation root (DATAROOTDIR/doc/PROJECT_NAME)
CMAKE_INSTALL_DOCDIR:PATH=

//C header files (include)
CMAKE_INSTALL_INCLUDEDIR:PATH=include

//Info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_INFODIR:PATH=

//Object code libraries (lib)
CMAKE_INSTALL_LIBDIR:PATH=lib

//Program executables (libexec)
CMAKE_INSTALL_LIBEXECDIR:PATH=libexec

//Locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_LOCALEDIR:PATH=

//Modifiable single-machine data (var)
CMAKE_INSTALL_LOCALSTATEDIR:PATH=var

//Man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_MANDIR:PATH=

//C header files for non-gcc (/usr/include)
CMAKE_INSTALL_OLDINCLUDEDIR:PATH=/usr/include

//Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=C:/Program Files/AmazonChimeSignalingSdkCpp

//Run-time variable data (LOCALSTATEDIR/run)
CMAKE_INSTALL_RUNSTATEDIR:PATH=

//System admin executables (sbin)
CMAKE_INSTALL_SBINDIR:PATH=sbin

//Modifiable architecture-independent data (com)
CMAKE_INSTALL_SHAREDSTATEDIR:PATH=com

//Read-only single-machine data (etc)
CMAKE_INSTALL_SYSCONFDIR:PATH=etc

//Path to a program.
CMAKE_LINKER:FILEPATH=C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/link.exe

//Flags used by the linker during the creation of modules during
// all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during the creation of modules during
// DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

//Flags used by the linker during the creation of modules during
// MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

//Flags used by the linker during the creation of modules during
// RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

//Flags used by the linker during the creation of modules during
// RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

//Path to a program.
CMAKE_MT:FILEPATH=C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/mt.exe

//Value Computed by CMake
CMAKE_PROJECT_DESCRIPTION:STATIC=Library for Amazon Chime's C++ Signaling SDK

//Value Computed by CMake
CMAKE_PROJECT_HOMEPAGE_URL:STATIC=

//Value Computed by CMake
CMAKE_PROJECT_NAME:STATIC=AmazonChimeSignalingSdkCpp

//Value Computed by CMake
CMAKE_PROJECT_VERSION:STATIC=0.1.0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_MAJOR:STATIC=0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_MINOR:STATIC=1

//Value Computed by CMake
CMAKE_PROJECT_VERSION_PATCH:STATIC=0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_TWEAK:STATIC=

//RC compiler
CMAKE_RC_COMPILER:FILEPATH=C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/rc.exe

//Flags for Windows Resource Compiler during all build types.
CMAKE_RC_FLAGS:STRING=-DWIN32

//Flags for Windows Resource Compiler during DEBUG builds.
CMAKE_RC_FLAGS_DEBUG:STRING=-D_DEBUG

//Flags for Windows Resource Compiler during MINSIZEREL builds.
CMAKE_RC_FLAGS_MINSIZEREL:STRING=

//Flags for Windows Resource Compiler during RELEASE builds.
CMAKE_RC_FLAGS_RELEASE:STRING=

//Flags for Windows Resource Compiler during RELWITHDEBINFO builds.
CMAKE_RC_FLAGS_RELWITHDEBINFO:STRING=

//Flags used by the linker during the creation of shared libraries
// during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during the creation of shared libraries
// during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

//Flags used by the linker during the creation of shared libraries
// during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

//Flags used by the linker during the creation of shared libraries
// during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

//Flags used by the linker during the creation of shared libraries
// during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

//If set, runtime paths are not added when installing shared libraries,
// but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

//If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

//Flags used by the linker during the creation of static libraries
// during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during the creation of static libraries
// during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of static libraries
// during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of static libraries
// during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of static libraries
// during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//If this value is on, makefiles will be generated without the
// .SILENT directive, and all commands will be echoed to the console
// during the make.  This is useful for debugging only. With Visual
// Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

//Path to the coverage program that CTest uses for performing coverage
// inspection
COVERAGE_COMMAND:FILEPATH=COVERAGE_COMMAND-NOTFOUND

//Extra command line flags to pass to the coverage tool
COVERAGE_EXTRA_FLAGS:STRING=-l

//How many times to retry timed-out CTest submissions.
CTEST_SUBMIT_RETRY_COUNT:STRING=3

//How long to wait between timed-out CTest submissions.
CTEST_SUBMIT_RETRY_DELAY:STRING=5

//Maximum time allowed before CTest will kill the test.
DART_TESTING_TIMEOUT:STRING=1500

//Avoid treating compiler warnings as fatal errors
DISABLE_WERROR:BOOL=OFF

//Enable Address Sanitizer
ENABLE_ASAN:BOOL=OFF

//Directory under which to collect all populated content
FETCHCONTENT_BASE_DIR:PATH=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps

//Disables all attempts to download or update content and assumes
// source dirs already exist
FETCHCONTENT_FULLY_DISCONNECTED:BOOL=OFF

//Enables QUIET option for all content population
FETCHCONTENT_QUIET:BOOL=ON

//When not empty, overrides where to find pre-populated content
// for googletest
FETCHCONTENT_SOURCE_DIR_GOOGLETEST:PATH=

//When not empty, overrides where to find pre-populated content
// for libwebsockets
FETCHCONTENT_SOURCE_DIR_LIBWEBSOCKETS:PATH=

//When not empty, overrides where to find pre-populated content
// for protobuf
FETCHCONTENT_SOURCE_DIR_PROTOBUF:PATH=

//Enables UPDATE_DISCONNECTED behavior for all content population
FETCHCONTENT_UPDATES_DISCONNECTED:BOOL=OFF

//Enables UPDATE_DISCONNECTED behavior just for population of googletest
FETCHCONTENT_UPDATES_DISCONNECTED_GOOGLETEST:BOOL=OFF

//Enables UPDATE_DISCONNECTED behavior just for population of libwebsockets
FETCHCONTENT_UPDATES_DISCONNECTED_LIBWEBSOCKETS:BOOL=OFF

//Enables UPDATE_DISCONNECTED behavior just for population of protobuf
FETCHCONTENT_UPDATES_DISCONNECTED_PROTOBUF:BOOL=OFF

//Path to a program.
GITCOMMAND:FILEPATH=C:/Program Files/Git/cmd/git.exe

//Git command line client
GIT_EXECUTABLE:FILEPATH=C:/Program Files/Git/cmd/git.exe

//Enable installation of googletest. (Projects embedding googletest
// may want to turn this OFF.)
INSTALL_GTEST:BOOL=ON

//Libwebsockets include directories
LIBWEBSOCKETS_INCLUDE_DIRS:PATH=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/libwebsockets-src/lib;C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/libwebsockets-build

//Libwebsocket libraries
LIBWEBSOCKETS_LIBRARIES:STRING=websockets;websockets_shared

//Libwebsocket shared library
LIBWEBSOCKETS_LIBRARIES_SHARED:STRING=websockets_shared

//Libwebsocket static library
LIBWEBSOCKETS_LIBRARIES_STATIC:STRING=websockets

//Android 7+ reportedly needs this
LWS_AVOID_SIGPIPE_IGN:BOOL=OFF

//Support external http proxies for client connections
LWS_CLIENT_HTTP_PROXYING:BOOL=ON

//CTest will performs tests that need the Internet
LWS_CTEST_INTERNET_AVAILABLE:BOOL=OFF

//Path to an external pthreads include directory
LWS_EXT_PTHREAD_INCLUDE_DIR:PATH=

//Path to an external pthreads library
LWS_EXT_PTHREAD_LIBRARIES:PATH=

//Also try to do dns resolution using gethostbyname if getaddrinfo
// fails
LWS_FALLBACK_GETHOSTBYNAME:BOOL=OFF

//Enable features recommended for use with gitohashi
LWS_FOR_GITOHASHI:BOOL=OFF

//Override header reduction optimization and include all like older
// lws versions
LWS_HTTP_HEADERS_ALL:BOOL=OFF

//Installation directory for executables
LWS_INSTALL_BIN_DIR:PATH=bin

//Installation directory for CMake files
LWS_INSTALL_CMAKE_DIR:PATH=cmake

//Installation directory for example files
LWS_INSTALL_EXAMPLES_DIR:PATH=bin

//Installation directory for header files
LWS_INSTALL_INCLUDE_DIR:PATH=include

//Installation directory for libraries
LWS_INSTALL_LIB_DIR:PATH=lib

//Compile with support for ipv6
LWS_IPV6:BOOL=OFF

//Path to the libmount include directory
LWS_LIBMOUNT_INCLUDE_DIRS:PATH=

//Path to the libmount library
LWS_LIBMOUNT_LIBRARIES:PATH=

//Link the test apps to the shared version of the library. Default
// is to link statically
LWS_LINK_TESTAPPS_DYNAMIC:BOOL=OFF

//Bitfield describing which log levels to force removed from the
// build
LWS_LOGGING_BITFIELD_CLEAR:STRING=0

//Bitfield describing which log levels to force included into the
// build
LWS_LOGGING_BITFIELD_SET:STRING=0

//Timestamp at start of logs
LWS_LOGS_TIMESTAMP:BOOL=ON

//Log tagged object lifecycle as NOTICE
LWS_LOG_TAG_LIFECYCLE:BOOL=ON

//Server SSL certificate directory
LWS_OPENSSL_CLIENT_CERTS:PATH=../share

//Path to the OpenSSL include directory
LWS_OPENSSL_INCLUDE_DIRS:PATH=C:/webrtc/src/third_party/boringssl/src/include

//Path to the OpenSSL library
LWS_OPENSSL_LIBRARIES:PATH=C:/webrtc/src/out/msvc/win/Release/x64/obj/third_party/boringssl/boringssl.lib;C:/webrtc/src/out/msvc/win/Release/x64/obj/third_party/boringssl/boringssl_asm.lib

//Android flavour of unix platform
LWS_PLAT_ANDROID:BOOL=OFF

//Build for FreeRTOS
LWS_PLAT_FREERTOS:BOOL=OFF

//Build for OPTEE
LWS_PLAT_OPTEE:BOOL=OFF

//Build libwebsockets reproducible. It removes the build user and
// hostname from the build
LWS_REPRODUCIBLE:BOOL=ON

//Compile with support for DBUS
LWS_ROLE_DBUS:BOOL=OFF

//Compile with support for http/1 (needed for ws)
LWS_ROLE_H1:BOOL=ON

//Build with support for MQTT client
LWS_ROLE_MQTT:BOOL=OFF

//Compile with support for raw files
LWS_ROLE_RAW_FILE:BOOL=ON

//Raw packet proxy
LWS_ROLE_RAW_PROXY:BOOL=OFF

//Compile with support for websockets
LWS_ROLE_WS:BOOL=ON

//Path to the sqlite3 include directory
LWS_SQLITE3_INCLUDE_DIRS:PATH=

//Path to the sqlite3 library
LWS_SQLITE3_LIBRARIES:PATH=

//SSL support should make use of the OS-installed CA root certs
LWS_SSL_CLIENT_USE_OS_CA_CERTS:BOOL=ON

//Include SSL server use ECDH certificate
LWS_SSL_SERVER_WITH_ECDH_CERT:BOOL=OFF

//Build the static version of the library with position-independent
// code
LWS_STATIC_PIC:BOOL=OFF

//Turn off complaints about, eg, openssl 3 deprecated api usage
LWS_SUPPRESS_DEPRECATED_API_WARNINGS:BOOL=ON

//For debugging log the received plaintext as soon as decrypted
LWS_TLS_LOG_PLAINTEXT_RX:BOOL=OFF

//For debugging log the transmitted plaintext just before encryption
LWS_TLS_LOG_PLAINTEXT_TX:BOOL=OFF

//Compile with support for UNIX domain socket if OS supports it
LWS_UNIX_SOCK:BOOL=ON

//Don't use the BSD getifaddrs implementation from libwebsockets
// if it is missing (this will result in a compilation error) ...
// The default is to assume that your libc provides it. On some
// systems such as uclibc it doesn't exist.
LWS_WITHOUT_BUILTIN_GETIFADDRS:BOOL=OFF

//Don't build the lws sha-1 (eg, because openssl will provide it
LWS_WITHOUT_BUILTIN_SHA1:BOOL=OFF

//Don't build the client part of the library
LWS_WITHOUT_CLIENT:BOOL=OFF

//Don't build the daemonization api
LWS_WITHOUT_DAEMONIZE:BOOL=ON

//Force using pipe instead of eventfd
LWS_WITHOUT_EVENTFD:BOOL=OFF

//Don't compile with extensions
LWS_WITHOUT_EXTENSIONS:BOOL=ON

//Don't build the server part of the library
LWS_WITHOUT_SERVER:BOOL=OFF

//Don't build the libwebsocket-test-apps
LWS_WITHOUT_TESTAPPS:BOOL=ON

//Don't build the client test application
LWS_WITHOUT_TEST_CLIENT:BOOL=ON

//Don't build the ping test application
LWS_WITHOUT_TEST_PING:BOOL=ON

//Don't build the test server
LWS_WITHOUT_TEST_SERVER:BOOL=ON

//Don't build the test server version that uses external poll
LWS_WITHOUT_TEST_SERVER_EXTPOLL:BOOL=ON

//Support generating Apache-compatible access logs
LWS_WITH_ACCESS_LOG:BOOL=OFF

//Enable support for ACME automatic cert acquisition + maintenance
// (letsencrypt etc)
LWS_WITH_ACME:BOOL=OFF

//Enable alsa audio example
LWS_WITH_ALSA:BOOL=OFF

//Build with gcc runtime sanitizer options enabled (needs libasan)
LWS_WITH_ASAN:BOOL=OFF

//Use BoringSSL replacement for OpenSSL
LWS_WITH_BORINGSSL:BOOL=ON

//Use bundled zlib version (Windows only)
LWS_WITH_BUNDLED_ZLIB:BOOL=ON

//Build file-backed lws-cache-ttl that uses netscape cookie jar
// format (linux-only)
LWS_WITH_CACHE_NSCOOKIEJAR:BOOL=ON

//With the Lightweight LECP CBOR Parser
LWS_WITH_CBOR:BOOL=OFF

//Build floating point types if building CBOR LECP
LWS_WITH_CBOR_FLOAT:BOOL=ON

//Include CGI (spawn process with network-connected stdin/out/err)
// APIs
LWS_WITH_CGI:BOOL=OFF

//Collect introspectable connection latency stats on individual
// client connections
LWS_WITH_CONMON:BOOL=ON

//COSE CBOR Signature / Encryption / Keys (RFC8152) API
LWS_WITH_COSE:BOOL=OFF

//Store and allow querying custom HTTP headers (H1 only)
LWS_WITH_CUSTOM_HEADERS:BOOL=ON

//Use CyaSSL replacement for OpenSSL. When setting this, you also
// need to specify LWS_CYASSL_LIBRARIES and LWS_CYASSL_INCLUDE_DIRS
LWS_WITH_CYASSL:BOOL=OFF

//Directory scanning api support
LWS_WITH_DIR:BOOL=ON

//Hashed cache directory with lazy LRU deletion to size limit (unrelated
// to lws_cache_ttl)
LWS_WITH_DISKCACHE:BOOL=OFF

//Enable features recommended for distro packaging
LWS_WITH_DISTRO_RECOMMENDED:BOOL=OFF

//With generic drivers for gpio, i2c, display etc
LWS_WITH_DRIVERS:BOOL=OFF

//Build for ESP32
LWS_WITH_ESP32:BOOL=OFF

//Compile event lib support into runtime-selected plugins
LWS_WITH_EVLIB_PLUGINS:BOOL=OFF

//Export libwebsockets CMake targets.  Disable if they conflict
// with an outer cmake project.
LWS_WITH_EXPORT_LWSTARGETS:BOOL=ON

//Support external POLL integration using callback messages (not
// recommended)
LWS_WITH_EXTERNAL_POLL:BOOL=OFF

//Enable gcc -fanalyzer if compiler supports
LWS_WITH_FANALYZER:BOOL=OFF

//Support file operations vfs
LWS_WITH_FILE_OPS:BOOL=ON

//Overlayfs and fallback mounting apis
LWS_WITH_FSMOUNT:BOOL=OFF

//Full Text Search support
LWS_WITH_FTS:BOOL=OFF

//Build with gcc gcov coverage instrumentation
LWS_WITH_GCOV:BOOL=OFF

//Enable support for Generic Crypto apis independent of TLS backend
LWS_WITH_GENCRYPTO:BOOL=OFF

//Compile with support for glib event loop
LWS_WITH_GLIB:BOOL=OFF

//Enable gtk example
LWS_WITH_GTK:BOOL=OFF

//Compile with server support for HTTP/2
LWS_WITH_HTTP2:BOOL=ON

//Support Basic Auth
LWS_WITH_HTTP_BASIC_AUTH:BOOL=ON

//Also offer brotli http stream compression (requires LWS_WITH_HTTP_STREAM_COMPRESSION)
LWS_WITH_HTTP_BROTLI:BOOL=OFF

//Support for active HTTP proxying
LWS_WITH_HTTP_PROXY:BOOL=OFF

//Support HTTP stream compression
LWS_WITH_HTTP_STREAM_COMPRESSION:BOOL=OFF

//Include less common http header support
LWS_WITH_HTTP_UNCOMMON_HEADERS:BOOL=ON

//Enable libhubbub rewriting support
LWS_WITH_HUBBUB:BOOL=OFF

//JOSE JSON Web Signature / Encryption / Keys (RFC7515/6/) API
LWS_WITH_JOSE:BOOL=OFF

//With the Lightweight JSON Parser
LWS_WITH_LEJP:BOOL=ON

//With LEJP configuration parser as used by lwsws
LWS_WITH_LEJP_CONF:BOOL=ON

//Compile with support for libev
LWS_WITH_LIBEV:BOOL=OFF

//Compile with support for libevent
LWS_WITH_LIBEVENT:BOOL=OFF

//Compile with support for libuv
LWS_WITH_LIBUV:BOOL=OFF

//lwsac Chunk Allocation api
LWS_WITH_LWSAC:BOOL=ON

//Libwebsockets Webserver
LWS_WITH_LWSWS:BOOL=OFF

//Support lws_dsh_t Disordered Shared Heap
LWS_WITH_LWS_DSH:BOOL=OFF

//Use mbedTLS (>=2.0) replacement for OpenSSL. When setting this,
// you also may need to specify LWS_MBEDTLS_LIBRARIES and LWS_MBEDTLS_INCLUDE_DIRS
LWS_WITH_MBEDTLS:BOOL=OFF

//Also build the normally standalone minimal examples, for QA
LWS_WITH_MINIMAL_EXAMPLES:BOOL=OFF

//Use miniz instead of zlib
LWS_WITH_MINIZ:BOOL=OFF

//Compile with network-related code
LWS_WITH_NETWORK:BOOL=ON

//Disable all logging other than _err and _user from being compiled
// in
LWS_WITH_NO_LOGS:BOOL=OFF

//Track peers and restrict resources a single peer can allocate
LWS_WITH_PEER_LIMITS:BOOL=OFF

//Support plugins for protocols and extensions (implies LWS_WITH_PLUGINS_API)
LWS_WITH_PLUGINS:BOOL=OFF

//Build generic lws_plugins apis (see LWS_WITH_PLUGINS to also
// build protocol plugins)
LWS_WITH_PLUGINS_API:BOOL=OFF

//Build the plugin protocols directly into lws library
LWS_WITH_PLUGINS_BUILTIN:BOOL=OFF

//Support http ranges (RFC7233)
LWS_WITH_RANGES:BOOL=OFF

//Compile with support for sd-event loop
LWS_WITH_SDEVENT:BOOL=OFF

//Secure Streams protocol-agnostic API
LWS_WITH_SECURE_STREAMS:BOOL=OFF

//Secure Streams Auth support for AWS Sigv4
LWS_WITH_SECURE_STREAMS_AUTH_SIGV4:BOOL=OFF

//Secure Streams protocol buffer dump
LWS_WITH_SECURE_STREAMS_BUFFER_DUMP:BOOL=OFF

//Secure Streams C++ classes
LWS_WITH_SECURE_STREAMS_CPP:BOOL=OFF

//Secure Streams support to work across processes
LWS_WITH_SECURE_STREAMS_PROXY_API:BOOL=OFF

//Secure Streams Policy is hardcoded only
LWS_WITH_SECURE_STREAMS_STATIC_POLICY_ONLY:BOOL=OFF

//Auth support for api.amazon.com
LWS_WITH_SECURE_STREAMS_SYS_AUTH_API_AMAZON_COM:BOOL=OFF

//Selftests run at context creation
LWS_WITH_SELFTESTS:BOOL=OFF

//lws_seq_t support
LWS_WITH_SEQUENCER:BOOL=OFF

//Build the shared version of the library
LWS_WITH_SHARED:BOOL=ON

//Allow use of SOCKS5 proxy on client connections
LWS_WITH_SOCKS5:BOOL=OFF

//Spawn subprocesses with piped stdin/out/stderr
LWS_WITH_SPAWN:BOOL=OFF

//Require SQLITE3 support
LWS_WITH_SQLITE3:BOOL=OFF

//Include SSL support (defaults to OpenSSL or similar, mbedTLS
// if LWS_WITH_MBEDTLS is set)
LWS_WITH_SSL:BOOL=ON

//Secure Streams directly set/get metadata w/o policy
LWS_WITH_SS_DIRECT_PROTOCOL_STR:BOOL=OFF

//Build the static version of the library
LWS_WITH_STATIC:BOOL=ON

//Generic struct serialization to and from JSON
LWS_WITH_STRUCT_JSON:BOOL=OFF

//Generic struct serialization to and from SQLITE3
LWS_WITH_STRUCT_SQLITE3:BOOL=OFF

//Enable zombie lws_sul checking on object deletion
LWS_WITH_SUL_DEBUGGING:BOOL=OFF

//Nonblocking internal IPv4 + IPv6 DNS resolver
LWS_WITH_SYS_ASYNC_DNS:BOOL=OFF

//Build in tiny DHCP client
LWS_WITH_SYS_DHCP_CLIENT:BOOL=OFF

//Enable fault injection support
LWS_WITH_SYS_FAULT_INJECTION:BOOL=OFF

//Lws Metrics API
LWS_WITH_SYS_METRICS:BOOL=OFF

//Build in tiny ntpclient good for tls date validation and run
// via lws_system
LWS_WITH_SYS_NTPCLIENT:BOOL=OFF

//Lws System Message Distribution
LWS_WITH_SYS_SMD:BOOL=ON

//lws_system state support
LWS_WITH_SYS_STATE:BOOL=ON

//Managed worker thread pool support (relies on pthreads)
LWS_WITH_THREADPOOL:BOOL=OFF

//Enable dynamically computing which trusted TLS CA is needed to
// be instantiated
LWS_WITH_TLS_JIT_TRUST:BOOL=OFF

//Enable persistent, resumable TLS sessions
LWS_WITH_TLS_SESSIONS:BOOL=ON

//Platform supports UDP
LWS_WITH_UDP:BOOL=ON

//Compile with support for uloop
LWS_WITH_ULOOP:BOOL=OFF

//Use wolfSSL replacement for OpenSSL. When setting this, you also
// need to specify LWS_WOLFSSL_LIBRARIES and LWS_WOLFSSL_INCLUDE_DIRS
LWS_WITH_WOLFSSL:BOOL=OFF

//Support serving pre-zipped files
LWS_WITH_ZIP_FOPS:BOOL=OFF

//Include zlib support (required for extensions)
LWS_WITH_ZLIB:BOOL=OFF

//Path to the wolfSSL include directory
LWS_WOLFSSL_INCLUDE_DIRS:PATH=

//Path to the wolfSSL library
LWS_WOLFSSL_LIBRARIES:PATH=

//Path to the zlib/miniz include directory
LWS_ZLIB_INCLUDE_DIRS:PATH=

//Path to the zlib/miniz library
LWS_ZLIB_LIBRARIES:PATH=

//Command to build the project
MAKECOMMAND:STRING="C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" --build . --config "${CTEST_CONFIGURATION_TYPE}"

//Path to the memory checking command, used for memory error detection.
MEMORYCHECK_COMMAND:FILEPATH=MEMORYCHECK_COMMAND-NOTFOUND

//File that contains suppressions for the memory checker
MEMORYCHECK_SUPPRESSIONS_FILE:FILEPATH=

//Openssl executable
OPENSSL_EXECUTABLE:FILEPATH=OPENSSL_EXECUTABLE-NOTFOUND

//Name of the computer/site where compile is being run
SITE:STRING=Phani-PC

//Path to a file.
ZLIB_INCLUDE_DIR:PATH=ZLIB_INCLUDE_DIR-NOTFOUND

//Path to a library.
ZLIB_LIBRARY_DEBUG:FILEPATH=ZLIB_LIBRARY_DEBUG-NOTFOUND

//Path to a library.
ZLIB_LIBRARY_RELEASE:FILEPATH=ZLIB_LIBRARY_RELEASE-NOTFOUND

//Value Computed by CMake
gmock_BINARY_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/googletest-build/googlemock

//Value Computed by CMake
gmock_SOURCE_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/googletest-src/googlemock

//Build all of Google Mock's own tests.
gmock_build_tests:BOOL=OFF

//Value Computed by CMake
googletest-distribution_BINARY_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/googletest-build

//Value Computed by CMake
googletest-distribution_SOURCE_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/googletest-src

//Value Computed by CMake
gtest_BINARY_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/googletest-build/googletest

//Value Computed by CMake
gtest_SOURCE_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/googletest-src/googletest

//Build gtest's sample programs.
gtest_build_samples:BOOL=OFF

//Build all of gtest's own tests.
gtest_build_tests:BOOL=OFF

//Disable uses of pthreads in gtest.
gtest_disable_pthreads:BOOL=OFF

gtest_force_shared_crt:BOOL=ON

//Build gtest with internal symbols hidden in shared libraries.
gtest_hide_internal_symbols:BOOL=OFF

//Dependencies for the target
gtest_main_LIB_DEPENDS:STATIC=general;gtest;

//Dependencies for the target
libprotoc_LIB_DEPENDS:STATIC=general;libprotobuf;

//Value Computed by CMake
libwebsockets_BINARY_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/libwebsockets-build

//Value Computed by CMake
libwebsockets_SOURCE_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/libwebsockets-src

//Value Computed by CMake
protobuf_BINARY_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/protobuf-build

//Build conformance tests
protobuf_BUILD_CONFORMANCE:BOOL=OFF

//Build examples
protobuf_BUILD_EXAMPLES:BOOL=OFF

//Build libprotoc and protoc compiler
protobuf_BUILD_PROTOC_BINARIES:BOOL=ON

//Build Shared Libraries
protobuf_BUILD_SHARED_LIBS:BOOL=OFF

//Build tests
protobuf_BUILD_TESTS:BOOL=OFF

//Default debug postfix
protobuf_DEBUG_POSTFIX:STRING=d

//Install the examples folder
protobuf_INSTALL_EXAMPLES:BOOL=OFF

//CMake build-in FindProtobuf.cmake module compatible
protobuf_MODULE_COMPATIBLE:BOOL=OFF

//Link static runtime libraries
protobuf_MSVC_STATIC_RUNTIME:BOOL=ON

//Value Computed by CMake
protobuf_SOURCE_DIR:STATIC=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/protobuf-src/cmake

//Enable for verbose output
protobuf_VERBOSE:BOOL=OFF

//Build with zlib support
protobuf_WITH_ZLIB:BOOL=ON

//Dependencies for the target
websockets_LIB_DEPENDS:STATIC=general;C:/webrtc/src/out/msvc/win/Release/x64/obj/third_party/boringssl/boringssl.lib;general;C:/webrtc/src/out/msvc/win/Release/x64/obj/third_party/boringssl/boringssl_asm.lib;general;ws2_32.lib;general;userenv.lib;general;psapi.lib;general;iphlpapi.lib;general;crypt32.lib;

//Dependencies for the target
websockets_shared_LIB_DEPENDS:STATIC=general;C:/webrtc/src/out/msvc/win/Release/x64/obj/third_party/boringssl/boringssl.lib;general;C:/webrtc/src/out/msvc/win/Release/x64/obj/third_party/boringssl/boringssl_asm.lib;general;ws2_32.lib;general;userenv.lib;general;psapi.lib;general;iphlpapi.lib;general;crypt32.lib;


########################
# INTERNAL cache entries
########################

//ADVANCED property for variable: CMAKE_AR
CMAKE_AR-ADVANCED:INTERNAL=1
//This is the directory where this CMakeCache.txt was created
CMAKE_CACHEFILE_DIR:INTERNAL=c:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build
//Major version of cmake used to create the current loaded cache
CMAKE_CACHE_MAJOR_VERSION:INTERNAL=3
//Minor version of cmake used to create the current loaded cache
CMAKE_CACHE_MINOR_VERSION:INTERNAL=20
//Patch version of cmake used to create the current loaded cache
CMAKE_CACHE_PATCH_VERSION:INTERNAL=21032501
//Path to CMake executable.
CMAKE_COMMAND:INTERNAL=C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe
//Path to cpack program executable.
CMAKE_CPACK_COMMAND:INTERNAL=C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cpack.exe
//ADVANCED property for variable: CMAKE_CTEST_COMMAND
CMAKE_CTEST_COMMAND-ADVANCED:INTERNAL=1
//Path to ctest program executable.
CMAKE_CTEST_COMMAND:INTERNAL=C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/ctest.exe
//ADVANCED property for variable: CMAKE_CXX_FLAGS
CMAKE_CXX_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_DEBUG
CMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_MINSIZEREL
CMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELEASE
CMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHDEBINFO
CMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_STANDARD_LIBRARIES
CMAKE_CXX_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS
CMAKE_C_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG
CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL
CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE
CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO
CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_STANDARD_LIBRARIES
CMAKE_C_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//Executable file format
CMAKE_EXECUTABLE_FORMAT:INTERNAL=Unknown
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS
CMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG
CMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE
CMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//Name of external makefile project generator.
CMAKE_EXTRA_GENERATOR:INTERNAL=
//Name of generator.
CMAKE_GENERATOR:INTERNAL=Visual Studio 16 2019
//Generator instance identifier.
CMAKE_GENERATOR_INSTANCE:INTERNAL=C:/Program Files (x86)/Microsoft Visual Studio/2019/Community
//Name of generator platform.
CMAKE_GENERATOR_PLATFORM:INTERNAL=x64
//Name of generator toolset.
CMAKE_GENERATOR_TOOLSET:INTERNAL=
//Have include pthread.h
CMAKE_HAVE_PTHREAD_H:INTERNAL=
//Source directory with the top level CMakeLists.txt file for this
// project
CMAKE_HOME_DIRECTORY:INTERNAL=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp
//ADVANCED property for variable: CMAKE_INSTALL_BINDIR
CMAKE_INSTALL_BINDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_CMAKEDIR
CMAKE_INSTALL_CMAKEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DATADIR
CMAKE_INSTALL_DATADIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DATAROOTDIR
CMAKE_INSTALL_DATAROOTDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DOCDIR
CMAKE_INSTALL_DOCDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_INCLUDEDIR
CMAKE_INSTALL_INCLUDEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_INFODIR
CMAKE_INSTALL_INFODIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LIBDIR
CMAKE_INSTALL_LIBDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LIBEXECDIR
CMAKE_INSTALL_LIBEXECDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LOCALEDIR
CMAKE_INSTALL_LOCALEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LOCALSTATEDIR
CMAKE_INSTALL_LOCALSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_MANDIR
CMAKE_INSTALL_MANDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_OLDINCLUDEDIR
CMAKE_INSTALL_OLDINCLUDEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_RUNSTATEDIR
CMAKE_INSTALL_RUNSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SBINDIR
CMAKE_INSTALL_SBINDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SHAREDSTATEDIR
CMAKE_INSTALL_SHAREDSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SYSCONFDIR
CMAKE_INSTALL_SYSCONFDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_LINKER
CMAKE_LINKER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS
CMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG
CMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE
CMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MT
CMAKE_MT-ADVANCED:INTERNAL=1
//number of local generators
CMAKE_NUMBER_OF_MAKEFILES:INTERNAL=27
//Platform information initialized
CMAKE_PLATFORM_INFO_INITIALIZED:INTERNAL=1
//noop for ranlib
CMAKE_RANLIB:INTERNAL=:
//ADVANCED property for variable: CMAKE_RC_COMPILER
CMAKE_RC_COMPILER-ADVANCED:INTERNAL=1
CMAKE_RC_COMPILER_WORKS:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS
CMAKE_RC_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_DEBUG
CMAKE_RC_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_MINSIZEREL
CMAKE_RC_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELEASE
CMAKE_RC_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELWITHDEBINFO
CMAKE_RC_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//Path to CMake installation.
CMAKE_ROOT:INTERNAL=C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/share/cmake-3.20
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS
CMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG
CMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE
CMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH
CMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_RPATH
CMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS
CMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG
CMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE
CMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE
CMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: COVERAGE_COMMAND
COVERAGE_COMMAND-ADVANCED:INTERNAL=1
//ADVANCED property for variable: COVERAGE_EXTRA_FLAGS
COVERAGE_EXTRA_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CTEST_SUBMIT_RETRY_COUNT
CTEST_SUBMIT_RETRY_COUNT-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CTEST_SUBMIT_RETRY_DELAY
CTEST_SUBMIT_RETRY_DELAY-ADVANCED:INTERNAL=1
//ADVANCED property for variable: DART_TESTING_TIMEOUT
DART_TESTING_TIMEOUT-ADVANCED:INTERNAL=1
//Details about finding Git
FIND_PACKAGE_MESSAGE_DETAILS_Git:INTERNAL=[C:/Program Files/Git/cmd/git.exe][v2.37.1.windows.1()]
//Details about finding Python
FIND_PACKAGE_MESSAGE_DETAILS_Python:INTERNAL=[C:/Python27/python.exe][cfound components: Interpreter ][v2.7.10()]
//Details about finding Threads
FIND_PACKAGE_MESSAGE_DETAILS_Threads:INTERNAL=[TRUE][v()]
//ADVANCED property for variable: GITCOMMAND
GITCOMMAND-ADVANCED:INTERNAL=1
//ADVANCED property for variable: GIT_EXECUTABLE
GIT_EXECUTABLE-ADVANCED:INTERNAL=1
//Test LWS_HAS_GETOPT_LONG
LWS_HAS_GETOPT_LONG:INTERNAL=
//Test LWS_HAS_INTPTR_T
LWS_HAS_INTPTR_T:INTERNAL=1
//Have function atoll
LWS_HAVE_ATOLL:INTERNAL=1
//Have function BN_bn2binpad
LWS_HAVE_BN_bn2binpad:INTERNAL=1
//Have function clock_gettime
LWS_HAVE_CLOCK_GETTIME:INTERNAL=
//Have function ctime_r
LWS_HAVE_CTIME_R:INTERNAL=
//Have function ECDSA_SIG_set0
LWS_HAVE_ECDSA_SIG_set0:INTERNAL=1
//Have function EC_KEY_new_by_curve_name
LWS_HAVE_EC_KEY_new_by_curve_name:INTERNAL=1
//Have function EC_POINT_get_affine_coordinates
LWS_HAVE_EC_POINT_get_affine_coordinates:INTERNAL=
//Test LWS_HAVE_EVP_MD_CTX_free
LWS_HAVE_EVP_MD_CTX_free:INTERNAL=1
//Have function EVP_PKEY_new_raw_private_key
LWS_HAVE_EVP_PKEY_new_raw_private_key:INTERNAL=1
//Have function EVP_aes_128_cfb128
LWS_HAVE_EVP_aes_128_cfb128:INTERNAL=
//Have function EVP_aes_128_cfb8
LWS_HAVE_EVP_aes_128_cfb8:INTERNAL=
//Have function EVP_aes_128_ctr
LWS_HAVE_EVP_aes_128_ctr:INTERNAL=1
//Have function EVP_aes_128_ecb
LWS_HAVE_EVP_aes_128_ecb:INTERNAL=1
//Have function EVP_aes_128_ofb
LWS_HAVE_EVP_aes_128_ofb:INTERNAL=1
//Have function EVP_aes_128_wrap
LWS_HAVE_EVP_aes_128_wrap:INTERNAL=
//Have function EVP_aes_128_xts
LWS_HAVE_EVP_aes_128_xts:INTERNAL=
//Have function EVP_aes_192_cfb128
LWS_HAVE_EVP_aes_192_cfb128:INTERNAL=
//Have function EVP_aes_192_cfb8
LWS_HAVE_EVP_aes_192_cfb8:INTERNAL=
//Have function EVP_aes_256_cfb128
LWS_HAVE_EVP_aes_256_cfb128:INTERNAL=
//Have function EVP_aes_256_cfb8
LWS_HAVE_EVP_aes_256_cfb8:INTERNAL=
//Have function execvpe
LWS_HAVE_EXECVPE:INTERNAL=1
//Have function fork
LWS_HAVE_FORK:INTERNAL=
//Have function getenv
LWS_HAVE_GETENV:INTERNAL=1
//Have function getgrgid_r
LWS_HAVE_GETGRGID_R:INTERNAL=
//Have function getgrnam_r
LWS_HAVE_GETGRNAM_R:INTERNAL=
//Have function getifaddrs
LWS_HAVE_GETIFADDRS:INTERNAL=
//Have function getloadavg
LWS_HAVE_GETLOADAVG:INTERNAL=
//Have function getpwnam_r
LWS_HAVE_GETPWNAM_R:INTERNAL=
//Have function getpwuid_r
LWS_HAVE_GETPWUID_R:INTERNAL=
//Have function gmtime_r
LWS_HAVE_GMTIME_R:INTERNAL=
//Have function HMAC_CTX_new
LWS_HAVE_HMAC_CTX_new:INTERNAL=1
//Have include in6addr.h
LWS_HAVE_IN6ADDR_H:INTERNAL=1
//Have include inttypes.h
LWS_HAVE_INTTYPES_H:INTERNAL=1
//Have library cap
LWS_HAVE_LIBCAP:INTERNAL=
//Have function localtime_r
LWS_HAVE_LOCALTIME_R:INTERNAL=
//Have function malloc
LWS_HAVE_MALLOC:INTERNAL=1
//Have include malloc.h
LWS_HAVE_MALLOC_H:INTERNAL=1
//Test LWS_HAVE_MALLOC_TRIM
LWS_HAVE_MALLOC_TRIM:INTERNAL=
//Test LWS_HAVE_MALLOC_USABLE_SIZE
LWS_HAVE_MALLOC_USABLE_SIZE:INTERNAL=
//Have include memory.h
LWS_HAVE_MEMORY_H:INTERNAL=1
//Have function memset
LWS_HAVE_MEMSET:INTERNAL=1
//Have include netinet/in.h
LWS_HAVE_NETINET_IN_H:INTERNAL=
//Have include openssl/ecdh.h
LWS_HAVE_OPENSSL_ECDH_H:INTERNAL=
//Test LWS_HAVE_OPENSSL_STACK
LWS_HAVE_OPENSSL_STACK:INTERNAL=
//Test LWS_HAVE_PIPE2
LWS_HAVE_PIPE2:INTERNAL=
//Have include pthread.h
LWS_HAVE_PTHREAD_H:INTERNAL=
//Have function realloc
LWS_HAVE_REALLOC:INTERNAL=1
//Have function RSA_set0_key
LWS_HAVE_RSA_SET0_KEY:INTERNAL=1
//Have function RSA_verify_pss_mgf1
LWS_HAVE_RSA_verify_pss_mgf1:INTERNAL=1
//Test LWS_HAVE_RTA_PREF
LWS_HAVE_RTA_PREF:INTERNAL=
//Have function snprintf
LWS_HAVE_SNPRINTF:INTERNAL=
//Have function socket
LWS_HAVE_SOCKET:INTERNAL=
//Have function SSL_CTX_EVP_PKEY_new_raw_private_key
LWS_HAVE_SSL_CTX_EVP_PKEY_new_raw_private_key:INTERNAL=
//Have function SSL_CTX_get0_certificate
LWS_HAVE_SSL_CTX_get0_certificate:INTERNAL=1
//Have function SSL_CTX_set1_param
LWS_HAVE_SSL_CTX_set1_param:INTERNAL=1
//Test LWS_HAVE_SSL_EXTRA_CHAIN_CERTS
LWS_HAVE_SSL_EXTRA_CHAIN_CERTS:INTERNAL=
//Have function SSL_SESSION_set_time
LWS_HAVE_SSL_SESSION_set_time:INTERNAL=1
//Have function SSL_set_info_callback
LWS_HAVE_SSL_SET_INFO_CALLBACK:INTERNAL=1
//Have function SSL_get0_alpn_selected
LWS_HAVE_SSL_get0_alpn_selected:INTERNAL=1
//Have function SSL_set_alpn_protos
LWS_HAVE_SSL_set_alpn_protos:INTERNAL=1
//Have include stdint.h
LWS_HAVE_STDINT_H:INTERNAL=1
//Have include stdlib.h
LWS_HAVE_STDLIB_H:INTERNAL=1
//Have function strerror
LWS_HAVE_STRERROR:INTERNAL=1
//Have include strings.h
LWS_HAVE_STRINGS_H:INTERNAL=
//Have include string.h
LWS_HAVE_STRING_H:INTERNAL=1
//Test LWS_HAVE_SUSECONDS_T
LWS_HAVE_SUSECONDS_T:INTERNAL=
//Have include sys/capability.h
LWS_HAVE_SYS_CAPABILITY_H:INTERNAL=
//Have include sys/prctl.h
LWS_HAVE_SYS_PRCTL_H:INTERNAL=
//Have include sys/resource.h
LWS_HAVE_SYS_RESOURCE_H:INTERNAL=
//Have include sys/socket.h
LWS_HAVE_SYS_SOCKET_H:INTERNAL=
//Have include sys/sockio.h
LWS_HAVE_SYS_SOCKIO_H:INTERNAL=
//Have include sys/stat.h
LWS_HAVE_SYS_STAT_H:INTERNAL=1
//Have include sys/types.h
LWS_HAVE_SYS_TYPES_H:INTERNAL=1
//Test LWS_HAVE_TCP_USER_TIMEOUT
LWS_HAVE_TCP_USER_TIMEOUT:INTERNAL=
//Have function timegm
LWS_HAVE_TIMEGM:INTERNAL=
//Have function TLSv1_2_client_method
LWS_HAVE_TLSV1_2_CLIENT_METHOD:INTERNAL=1
//Have function TLS_client_method
LWS_HAVE_TLS_CLIENT_METHOD:INTERNAL=1
//Have include unistd.h
LWS_HAVE_UNISTD_H:INTERNAL=
//Have function vfork
LWS_HAVE_VFORK:INTERNAL=
//Have include vfork.h
LWS_HAVE_VFORK_H:INTERNAL=
//Test LWS_HAVE_WIN32_AFUNIX_H
LWS_HAVE_WIN32_AFUNIX_H:INTERNAL=1
//Have function X509_VERIFY_PARAM_set1_host
LWS_HAVE_X509_VERIFY_PARAM_set1_host:INTERNAL=1
//Have function X509_get_key_usage
LWS_HAVE_X509_get_key_usage:INTERNAL=1
//Have function _atoi64
LWS_HAVE__ATOI64:INTERNAL=1
//Have function _snprintf
LWS_HAVE__SNPRINTF:INTERNAL=
//Have function _stat32i64
LWS_HAVE__STAT32I64:INTERNAL=1
//Have function _vsnprintf
LWS_HAVE__VSNPRINTF:INTERNAL=
//Test LWS_HAVE___inline
LWS_HAVE___inline:INTERNAL=1
//Test LWS_HAVE___inline__
LWS_HAVE___inline__:INTERNAL=
//Test LWS_HAVE_inline
LWS_HAVE_inline:INTERNAL=1
//ADVANCED property for variable: MAKECOMMAND
MAKECOMMAND-ADVANCED:INTERNAL=1
//ADVANCED property for variable: MEMORYCHECK_COMMAND
MEMORYCHECK_COMMAND-ADVANCED:INTERNAL=1
//ADVANCED property for variable: MEMORYCHECK_SUPPRESSIONS_FILE
MEMORYCHECK_SUPPRESSIONS_FILE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: OPENSSL_EXECUTABLE
OPENSSL_EXECUTABLE-ADVANCED:INTERNAL=1
//Have symbol X509_VERIFY_PARAM_set1_host
PARENT_SCOPE:INTERNAL=
//ADVANCED property for variable: SITE
SITE-ADVANCED:INTERNAL=1
//Have include stdlib.h;stdarg.h;string.h
STDC_HEADERS:INTERNAL=1
//ADVANCED property for variable: ZLIB_INCLUDE_DIR
ZLIB_INCLUDE_DIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: ZLIB_LIBRARY_DEBUG
ZLIB_LIBRARY_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: ZLIB_LIBRARY_RELEASE
ZLIB_LIBRARY_RELEASE-ADVANCED:INTERNAL=1
//CMAKE_INSTALL_PREFIX during last run
_GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX:INTERNAL=C:/Program Files/AmazonChimeSignalingSdkCpp
//Path to a program.
_Python_EXECUTABLE:INTERNAL=C:/Python27/python.exe
//Python Properties
_Python_INTERPRETER_PROPERTIES:INTERNAL=Python;2;7;10;64;;;C:\Python27\Lib;C:\Python27\Lib;C:\Python27\Lib\site-packages;C:\Python27\Lib\site-packages
_Python_INTERPRETER_SIGNATURE:INTERNAL=ecb216793665141aa9ca5207c6a429d1
generated_dir:INTERNAL=C:/Chime/amazon-chime-sdk-cpp/chime-sdk-signaling-cpp/build/_deps/googletest-build/googletest/generated
//ADVANCED property for variable: gmock_build_tests
gmock_build_tests-ADVANCED:INTERNAL=1
//ADVANCED property for variable: gtest_build_samples
gtest_build_samples-ADVANCED:INTERNAL=1
//ADVANCED property for variable: gtest_build_tests
gtest_build_tests-ADVANCED:INTERNAL=1
//ADVANCED property for variable: gtest_disable_pthreads
gtest_disable_pthreads-ADVANCED:INTERNAL=1
//ADVANCED property for variable: gtest_force_shared_crt
gtest_force_shared_crt-ADVANCED:INTERNAL=1
//ADVANCED property for variable: gtest_hide_internal_symbols
gtest_hide_internal_symbols-ADVANCED:INTERNAL=1
//ADVANCED property for variable: protobuf_DEBUG_POSTFIX
protobuf_DEBUG_POSTFIX-ADVANCED:INTERNAL=1
//ADVANCED property for variable: protobuf_MODULE_COMPATIBLE
protobuf_MODULE_COMPATIBLE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: protobuf_VERBOSE
protobuf_VERBOSE-ADVANCED:INTERNAL=1
targets_export_name:INTERNAL=GTestTargets

